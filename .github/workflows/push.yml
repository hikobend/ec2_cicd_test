# name: Deploy to Sandbox
# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_REGION: ap-northeast-1
#   AWS_ROLE_ARN: arn:aws:iam::021077554300:role/cicd_role

# permissions:
#   id-token: write
#   contents: read
# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Execute SSM Run Command
#         run: |
#           export RESPONSE=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"InstanceIds","Values":["i-0653a560e2d13c68b"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["sudo -i","cd /root/ec2_cicd_test","git pull",""]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region ap-northeast-1)
#           export COMMAND_ID=$(echo $RESPONSE | jq .Command.CommandId)
#           echo "commandId=${COMMAND_ID} >> $GITHUB_OUTPUT"


name: Build and Push

on:
  push:
    tags:
      - v*

jobs:
  build-and-push:

    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
      run: |
        docker rm -f $(docker ps -aq)
        IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker run -d -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

# docker rm -f $(docker ps -aq)
