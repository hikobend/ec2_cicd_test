name: Build and Push

on:
  push:
    branches:
      - main

jobs:
  build-and-push:

    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
      run: |
        docker build -t rails_test . --platform linux/amd64
        docker tag rails_test:latest 021077554300.dkr.ecr.ap-northeast-1.amazonaws.com/rails_test:latest
        docker push 021077554300.dkr.ecr.ap-northeast-1.amazonaws.com/rails_test:latest

      # ローカルの環境でdocker-composeを更新する 必要ある？
    - name: run local docker-compose
      run: |
        docker-compose pull

      # EC2にdocker-compose.ymlだけ置いて実行
    - name: remove docker image
      env:
        REGION: ap-northeast-1
        INSTANCE_ID: i-0653a560e2d13c68b
        COMMAND: 'sudo -i && cd /root && docker-compose pull && docker-compose up -d'
      run: |
        export RESPONSE=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"InstanceIds","Values":["'"$INSTANCE_ID"'"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["'"$COMMAND"'"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region $REGION)
        export COMMAND_ID=$(echo $RESPONSE | jq .Command.CommandId)
        echo "commandId=${COMMAND_ID} >> $GITHUB_OUTPUT"
