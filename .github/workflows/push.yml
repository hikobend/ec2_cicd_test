# name: Deploy to Sandbox
# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_REGION: ap-northeast-1
#   AWS_ROLE_ARN: arn:aws:iam::021077554300:role/cicd_role

# permissions:
#   id-token: write
#   contents: read
# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Execute SSM Run Command
#         run: |
#           export RESPONSE=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"InstanceIds","Values":["i-0653a560e2d13c68b"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["sudo -i","cd /root/ec2_cicd_test","git pull",""]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region ap-northeast-1)
#           export COMMAND_ID=$(echo $RESPONSE | jq .Command.CommandId)
#           echo "commandId=${COMMAND_ID} >> $GITHUB_OUTPUT"


name: ECR Push

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::021077554300:role/cicd_role

permissions:
  id-token: write
  contents: read

jobs:
  ecr-push:
    runs-on: ubuntu-latest
    name: ECR Push
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, to Amazon ECR
        run: |
          docker-compose build

      - name: push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rails_test
          IMAGE_TAG: latest
        run: |
          docker-compose push
